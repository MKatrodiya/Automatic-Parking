import gymnasium as gym
from gymnasium.wrappers import RecordVideo
import highway_env
from highway_env.envs import ParkingEnv
import imageio

from stable_baselines3 import PPO
from stable_baselines3.common.vec_env import SubprocVecEnv
from stable_baselines3.common.env_util import make_vec_env
import datetime


# Training and recording parameters
TRAIN = False
RECORD = True
RECORD_LIMIT = 100 # Frames to record in the video
EPISODE_RECORD_LIMIT = 1

# Environment Parameters
PARKED_CARS = 0
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
COLLISION_PENALTY = -10
REWARD_WEIGHTS = [100, 100, 5,5,1,1]

# Environment Parameters
config = {
    "observation": {
        "type": "KinematicsGoal",
        "features": ["x", "y", "vx", "vy", "cos_h", "sin_h"],
        "scales": REWARD_WEIGHTS,
        "normalize": True,
    },
    'other_vehicles_type': 'parked',
    'screen_width': SCREEN_WIDTH,
    'screen_height': SCREEN_HEIGHT,
    'vehicles_count': PARKED_CARS,
    # 'reward_weights': REWARD_WEIGHTS
}


if __name__ == "__main__":
    n_cpu = 8
    batch_size = 64
    n_steps = batch_size * 30
    timesteps = 2000000
    
    #env = gym.make("parking-v0")

    if TRAIN:
        env = make_vec_env("parking-v0", n_envs = n_cpu, vec_env_cls=SubprocVecEnv)
        model = PPO("MultiInputPolicy", env, verbose=1, batch_size=batch_size, n_steps=n_steps,
                learning_rate=1e-3, n_epochs=20, gamma=0.8)
    
        # Train the model
        model.learn(total_timesteps=timesteps)
        model.save("parking_policy/model")
        del model

    else:
        # env = make_vec_env("parking-v0", n_envs = 1, vec_env_cls=SubprocVecEnv)
        
        # Load the trained model
        rm = "rgb_array"
        model = PPO.load("parking_policy/model")
        env = gym.make("parking-v0", config=config, render_mode=rm)

        env.reset()
        env.render()
        frames = []
        gif_filename = f"parking_run_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.gif"
        t = 0
        e = 0
        while True and t < RECORD_LIMIT and e < EPISODE_RECORD_LIMIT:
            e += 1
            obs, info= env.reset()
            done = False
            total_reward = 0
            
            while not done and t < RECORD_LIMIT:
                t += 1
                action, _states = model.predict(obs)
                obs, reward, terminated, truncated, info = env.step(action)
                done = terminated
                # print(f"Total Reward: {reward}")
                print(f"Step: {t}, Total Reward: {reward}")
                frame = env.render()
                if RECORD:
                    frames.append(frame)
        if RECORD:
            imageio.mimsave(gif_filename, frames, fps=30)
            print(f"GIF saved to {gif_filename}")
